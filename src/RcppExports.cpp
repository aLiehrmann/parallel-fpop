// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// fpop_cpp
List * fpop_cpp(std::vector<double> y, double alpha, double muMinLocal, double muMaxLocal, std::vector<double> wt, int nbThreads);
RcppExport SEXP _parallelFpop_fpop_cpp(SEXP ySEXP, SEXP alphaSEXP, SEXP muMinLocalSEXP, SEXP muMaxLocalSEXP, SEXP wtSEXP, SEXP nbThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type muMinLocal(muMinLocalSEXP);
    Rcpp::traits::input_parameter< double >::type muMaxLocal(muMaxLocalSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type wt(wtSEXP);
    Rcpp::traits::input_parameter< int >::type nbThreads(nbThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(fpop_cpp(y, alpha, muMinLocal, muMaxLocal, wt, nbThreads));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_parallelFpop_fpop_cpp", (DL_FUNC) &_parallelFpop_fpop_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_parallelFpop(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
